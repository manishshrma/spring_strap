ques.Difference between applicationcontext and beanfactory?
ans->////////https://stackoverflow.com/questions/243385/beanfactory-vs-applicationcontext

if parent class have instances of other classes

ex-
class traingle{

Point pointa;
Point pointb;
}
then even if you make Point class as prototype(whiich does create new instances everytime you call)

but as traingle class is singleton so won't create new instances for Point claass everytime you call it
//thus we use Applicationcontextaware
ques; difference betweem applicationcontext close method vs applicationcontext registershutdownhook
///https://stackoverflow.com/questions/42018044/what-is-the-difference-between-registershutdownhook-and-close
--inshort close() - it close the application context immediatelly, while registershutdownhook close the application context when the jvm end.
//Bean post processor
Just before bean is initialize(or going to initialize)-->BeanPostProcess interface postprocessBeforeInitialization run
and after bean get initialized in context---> //     //       //            //       postprocessAfterInitialization run
so it is clear, that class that implement the BeanPosprocess interface get initialize in the context first. it is only class that initialize
at the very first moment.
///BeanFactoryPostProcessor
bean factory get called first.
//@Required

this annotation is used on for those members that need to defined. @required is checked by beanpostprocessor, now RequiredAnnotationBeanPostprocessor
is a class that need to be configured cause it use BeanPostProcess which further check if any member is @Requried
//bean vs component

explict creation of bean-> only applicable for methods
@Component (and @Service and @Repository) are used to auto-detect and auto-configure beans using classpath scanning.
 There's an implicit one-to-one mapping between the annotated class and the bean (i.e. one bean per class). 
 Control of wiring is quite limited with this approach, since it's purely declarative.

@Bean is used to explicitly declare a single bean, rather than letting Spring do it automatically as above.
 It decouples the declaration of the bean from the class definition, and lets you create and configure beans
  exactly how you choose.
 
  // to @Bean method, can give multiple alias name.
  
  you can register the bean in context by youself or let the bena defined by spring itself.
  
  class with @Component, need to be scanned by container by using @ComponentScan,
  but there is no need of @ComponentScan if you define the bean using @bean. because by this you explicitly creating
  the bean
























